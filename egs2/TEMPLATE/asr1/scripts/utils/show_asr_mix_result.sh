#!/bin/bash
mindepth=0
maxdepth=1

. utils/parse_options.sh

if [ $# -gt 1 ]; then
    echo "Usage: $0 --mindepth 0 --maxdepth 1 [exp]" 1>&2
    echo ""
    echo "Show the system environments and the evaluation results in Markdown format."
    echo 'The default of <exp> is "exp/".'
    exit 1
fi

[ -f ./path.sh ] && . ./path.sh
set -euo pipefail
if [ $# -eq 1 ]; then
    exp=$1
else
    exp=exp
fi


cat << EOF
<!-- Generated by $0 -->
# RESULTS
## Environments
- date: \`$(LC_ALL=C date)\`
EOF

python3 << EOF
import sys, espnet, torch
pyversion = sys.version.replace('\n', ' ')

print(f"""- python version: \`{pyversion}\`
- espnet version: \`espnet {espnet.__version__}\`
- pytorch version: \`pytorch {torch.__version__}\`""")
EOF

cat << EOF
- Git hash: \`$(git rev-parse HEAD)\`
  - Commit date: \`$(git log -1 --format='%cd')\`

EOF

while IFS= read -r expdir; do
    if ls "${expdir}"/*/*/score_*/min_perm_result.json &> /dev/null || ls "${expdir}"/*/*/score_*/fixed_perm_result_*.json &> /dev/null ; then
        echo "## $(basename ${expdir})"
        if ls "${expdir}"/*/*/score_*/min_perm_result.json &> /dev/null ; then
            # minimum permutation
            echo "### Minimum permutation"
            for type in wer cer ter; do
                if ls "${expdir}"/*/*/score_${type}/min_perm_result.json &> /dev/null; then
                    cat << EOF
#### ${type^^}

|dataset|Snt|Wrd|Corr|Sub|Del|Ins|Err|S.Err|
|---|---|---|---|---|---|---|---|---|
EOF
                    for f in $(ls "${expdir}"/*/*/score_${type}/min_perm_result.json); do
                        lines=$(head -n 6 "${f}")
                        dataset=$(echo "${f}" | sed -e "s#${expdir}/\\([^/]*/[^/]*\\)/score_${type}/min_perm_result.json#\\1#g")
                        scores=$(echo "${lines}" | grep "^Total Scores:" | tr -s ' ' | cut -d ' ' -f 8-11 | sed -e 's# #|#g')
                        error_rate=$(echo "${lines}" | grep "^Error Rate:" | tr -s ' ' | cut -d ' ' -f 3)
                        s_error_rate=$(echo "${lines}" | grep "^Sentence Error Rate:" | tr -s ' ' | cut -d ' ' -f 4)
                        word_total=$(echo "${lines}" | grep "^Total Words:" | tr -s ' ' | cut -d ' ' -f 3)
                        utt_total=$(echo "${lines}" | grep "^Total Utts:" | tr -s ' ' | cut -d ' ' -f 3)
                        echo "|${dataset}|${utt_total}|${word_total}|${scores}|${error_rate}|${s_error_rate}|"
                    done
                    echo
                fi
            done
        fi
        if ls "${expdir}"/*/*/score_*/fixed_perm_result_*.json &> /dev/null ; then
            # fixed permutation
            perms=$(ls "${expdir}"/*/*/score_*/fixed_perm_result_*.json | \
                sed -e "s#${expdir}/[^/]*/[^/]*/score_[^/]*/fixed_perm_result_\\([^/]*\\).json#\\1#g" | \
                sort | uniq)
            for perm in ${perms}; do
                echo "### Fixed permutation: ${perm}"
                for type in wer cer ter; do
                    if ls "${expdir}"/*/*/score_${type}/fixed_perm_result_${perm}.json &> /dev/null; then
                        cat << EOF
#### ${type^^}

|dataset|Snt|Wrd|Corr|Sub|Del|Ins|Err|S.Err|
|---|---|---|---|---|---|---|---|---|
EOF
                        for f in $(ls "${expdir}"/*/*/score_${type}/fixed_perm_result_${perm}.json); do
                            lines=$(head -n 6 "${f}")
                            dataset=$(echo "${f}" | sed -e "s#${expdir}/\\([^/]*/[^/]*\\)/score_${type}/fixed_perm_result_${perm}.json#\\1#g")
                            scores=$(echo "${lines}" | grep "^Total Scores:" | tr -s ' ' | cut -d ' ' -f 8-11 | sed -e 's# #|#g')
                            error_rate=$(echo "${lines}" | grep "^Error Rate:" | tr -s ' ' | cut -d ' ' -f 3)
                            s_error_rate=$(echo "${lines}" | grep "^Sentence Error Rate:" | tr -s ' ' | cut -d ' ' -f 4)
                            word_total=$(echo "${lines}" | grep "^Total Words:" | tr -s ' ' | cut -d ' ' -f 3)
                            utt_total=$(echo "${lines}" | grep "^Total Utts:" | tr -s ' ' | cut -d ' ' -f 3)
                            echo "|${dataset}|${utt_total}|${word_total}|${scores}|${error_rate}|${s_error_rate}|"
                        done
                        echo
                    fi
                done
            done
        fi
    fi


done < <(find ${exp} -mindepth ${mindepth} -maxdepth ${maxdepth} -type d)
